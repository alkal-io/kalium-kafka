package io.alkal.kalium.kafka.tests;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.fasterxml.jackson.databind.ObjectMapper;
import io.alkal.kalium.kafka.Constants;
import io.alkal.kalium.kafka.JsonDeSerializer;
import io.alkal.kalium.kafka.MultiDeSerializer;
import io.alkal.kalium.kafka.ProtobufDeSerializer;
import io.alkal.kalium.kafka.tests.pb.Payment;
import org.apache.kafka.common.errors.SerializationException;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;


import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MultiDeSerializerTest {

    private MultiDeSerializer target;

    private JsonDeSerializer jsonDeSerializer;

    private ProtobufDeSerializer protobufDeSerializer;

    @Before
    public void setup() {
        protobufDeSerializer = spy(ProtobufDeSerializer.class);
        jsonDeSerializer = spy(JsonDeSerializer.class);
        target = new MultiDeSerializer(jsonDeSerializer, protobufDeSerializer);
    }

    @Test
    public void testConfigure_shouldCallConfigureInDelagateDeSerializers() {
        boolean isKey = true;
        Map<String, Object> props = createValidProps();
        target.configure(props, isKey);
        verify(jsonDeSerializer).configure(eq(props), eq(isKey));
        verify(protobufDeSerializer).configure(eq(props), eq(isKey));
    }

    @Test(expected = RuntimeException.class)
    public void testConfigure_shouldThrowAnException_whenDelegatDeserializerThrowsException() throws InterruptedException {
        Map<String, Object> props = new HashMap<>();
        doThrow(new RuntimeException()).when(jsonDeSerializer).configure(null, false);
        target.configure(null, false);
    }


    @Test(expected = SerializationException.class)
    public void testDeserialize_shouldThrowAnException_whenDelegatDeserializerThrowsException() throws NoSuchMethodException {
        doThrow(new SerializationException()).when(jsonDeSerializer).deserialize(any(), any());
        target = spy(target);
        doReturn(false).when(target).isProtobuf(anyString());
        target.deserialize("topic", null);
    }

    @Test
    public void testDeserialize_shouldDelegateToProtoDeserialize_whenTopicIsForProtoObject() {
        Map<String, Object> props = createValidProps();
        target.configure(props, false);
        byte[] data = new byte[3];
        Payment.PaymentPB paymentPB = Payment.PaymentPB.newBuilder().build();
        doReturn(paymentPB).when(protobufDeSerializer).deserialize("paymentPb", data);
        verify(jsonDeSerializer, never()).deserialize(any(), any());
        Object object = target.deserialize("paymentPb", data);
        assertEquals(paymentPB, object);

    }

    @Test
    public void testDeserialize_shouldDelegateToJsonDeserialize_whenTopicIsNotForProtoObject() {
        Map<String, Object> props = createValidProps();
        target.configure(props, false);
        byte[] data = new byte[3];
        io.alkal.kalium.kafka.tests.Payment payment = new io.alkal.kalium.kafka.tests.Payment();
        doReturn(payment).when(jsonDeSerializer).deserialize("payment", data);
        verify(protobufDeSerializer, never()).deserialize(anyString(), any(byte[].class));
        Object object = target.deserialize("payment", data);
        assertEquals(payment, object);

    }

    @Test
    public void testClose_shouldCallCloseInDelagateDeSerializers() {

        target.close();
        verify(jsonDeSerializer).close();
        verify(protobufDeSerializer).close();
    }


    private static Map<String, Object> createValidProps() {
        Map<String, Object> props = new HashMap<>();
        Map<String, Class> topicToClassMap = new HashMap<>();
        topicToClassMap.put("paymentPb", io.alkal.kalium.kafka.tests.pb.Payment.PaymentPB.class);
        topicToClassMap.put("payment", io.alkal.kalium.kafka.tests.Payment.class);
        props.put(Constants.TOPIC_TO_CLASS_MAP, topicToClassMap);
        return props;
    }


}
