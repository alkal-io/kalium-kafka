package io.alkal.kalium.kafka.tests;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.alkal.kalium.kafka.JsonSerializer;
import org.apache.kafka.common.errors.SerializationException;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;


public class JsonSerializerTest {

    public static final String payment_id = "cdb0dfb9-396d-4269-bfa4-8408211b5e3d";
    public static final byte[] validSerializedPayment = new String("{\"processed\":false,\"id\":\"" + payment_id + "\"}").getBytes();
    public static final Payment payment = new Payment(payment_id);


    private JsonSerializer target;

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = mock(ObjectMapper.class);
        target = new JsonSerializer(objectMapper);
    }


    @Test(expected = SerializationException.class)
    public void testSerialize_whenObjectMapperThrowsException_shouldThrowSerializationException() throws Exception {
        Mockito.when(objectMapper.writeValueAsBytes(eq(payment))).thenThrow(new JsonMappingException(""));
        target.serialize("Payment", payment);
    }

    @Test
    public void testSerialize_whenObjectNull_shouldReturnNullObject() {
        Object o = target.serialize("Payment", null);
        assertNull(o);
    }


    @Test
    public void testSerializePayment_shouldReturnCorrectBytes() {
        //re-instanstiate the serializer with a real object mapper
        target = new JsonSerializer();
        byte[] bytes = target.serialize("Payment", payment);
        assertTrue("byte[] is empty", bytes != null && bytes.length > 0);
        assertArrayEquals(validSerializedPayment, target.serialize("Payment", payment));
    }
}
