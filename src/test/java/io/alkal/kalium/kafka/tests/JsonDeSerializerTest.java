package io.alkal.kalium.kafka.tests;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.fasterxml.jackson.databind.ObjectMapper;
import io.alkal.kalium.kafka.Constants;
import io.alkal.kalium.kafka.JsonDeSerializer;
import org.apache.kafka.common.errors.SerializationException;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;


public class JsonDeSerializerTest {

    public static final String payment_id = "cdb0dfb9-396d-4269-bfa4-8408211b5e3d";
    public static final byte[] validSerializedPayment = new String("{\"processed\":false,\"id\":\"" + payment_id + "\"}").getBytes();
    public static final String validTopic = "payment";

    private JsonDeSerializer target;

    private ObjectMapper objectMapper;

    @Before
    public void setup() {
        objectMapper = mock(ObjectMapper.class);
        target = new JsonDeSerializer(objectMapper);
    }

    @Test(expected = RuntimeException.class)
    public void testConfigure_shouldThrowAnException_whenPropsNull() throws InterruptedException {
        target.configure(null, false);
    }

    @Test(expected = RuntimeException.class)
    public void testConfigure_shouldThrowAnException_whenPropsHasNoTopicToClassMapKey() throws InterruptedException {
        target.configure(new HashMap<>(), false);
    }

    @Test(expected = RuntimeException.class)
    public void testConfigure_shouldThrowAnException_whenPropsHasNoTopicToClassMapValue() throws InterruptedException {
        HashMap<String, Object> props = new HashMap<>();
        props.put(Constants.TOPIC_TO_CLASS_MAP, null);
        target.configure(props, false);
    }


    @Test(expected = SerializationException.class)
    public void testDeserialize_whenTopicIsNull_shouldThrowSerializationException() {
        target.deserialize(null, validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenTopicIsEmptyString_shouldThrowSerializationException() {
        target.deserialize("", validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenTopicIsNotInTopicToClassMap_shouldThrowSerializationException() {
        Map<String, Object> props = new HashMap<>();
        Map<String, Class> topicToClassMap = new HashMap<>();
        props.put(Constants.TOPIC_TO_CLASS_MAP, topicToClassMap);
        target.configure(props, false);

        target.deserialize(validTopic, validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenNoClassIsMappedInTopicToClassMap_shouldThrowSerializationException() {
        Map<String, Object> props = new HashMap<>();
        Map<String, Class> topicToClassMap = new HashMap<>();
        topicToClassMap.put("payment", null);
        props.put(Constants.TOPIC_TO_CLASS_MAP, topicToClassMap);
        target.configure(props, false);

        target.deserialize(validTopic, validSerializedPayment);
    }

    @Test(expected = SerializationException.class)
    public void testDeserialize_whenObjectMapperThrowsException_shouldThrowSerializationException() throws Exception {
        Map<String, Object> props = createValidProps();
        Mockito.when(objectMapper.readValue(any(byte[].class), any(Class.class))).thenThrow(new IOException());
        target.configure(props, false);
        target.deserialize(validTopic, validSerializedPayment);
    }

    @Test
    public void testDeserialize_whenBytesNull_shouldReturnNullObject() {
        Map<String, Object> props = createValidProps();
        target.configure(props, false);
        Object o = target.deserialize(validTopic, null);
        assertNull(o);
    }

    @Test
    public void testDeserialize_whenBytesIsEmpty_shouldReturnNullObject() {
        Map<String, Object> props = createValidProps();
        target.configure(props, false);
        Object o = target.deserialize(validTopic, new byte[]{});
        assertNull(o);
    }

    @Test
    public void testDeserialize_shouldReturnPaymentObject() {
        Map<String, Object> props = createValidProps();
        target = new JsonDeSerializer();
        target.configure(props, false);
        Object o = target.deserialize(validTopic, validSerializedPayment);
        assertTrue(o instanceof Payment);
    }


    private static Map<String, Object> createValidProps() {
        Map<String, Object> props = new HashMap<>();
        Map<String, Class> topicToClassMap = new HashMap<>();
        topicToClassMap.put("payment", Payment.class);
        props.put(Constants.TOPIC_TO_CLASS_MAP, topicToClassMap);
        return props;
    }


}
